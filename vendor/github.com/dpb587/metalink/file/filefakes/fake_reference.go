// This file was generated by counterfeiter
package filefakes

import (
	"io"
	"sync"

	"github.com/cheggaaa/pb"
	"github.com/dpb587/metalink/file"
)

type FakeReference struct {
	NameStub        func() (string, error)
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
		result2 error
	}
	SizeStub        func() (uint64, error)
	sizeMutex       sync.RWMutex
	sizeArgsForCall []struct{}
	sizeReturns     struct {
		result1 uint64
		result2 error
	}
	ReaderStub        func() (io.ReadCloser, error)
	readerMutex       sync.RWMutex
	readerArgsForCall []struct{}
	readerReturns     struct {
		result1 io.ReadCloser
		result2 error
	}
	ReaderURIStub        func() string
	readerURIMutex       sync.RWMutex
	readerURIArgsForCall []struct{}
	readerURIReturns     struct {
		result1 string
	}
	WriteFromStub        func(file.Reference, *pb.ProgressBar) error
	writeFromMutex       sync.RWMutex
	writeFromArgsForCall []struct {
		arg1 file.Reference
		arg2 *pb.ProgressBar
	}
	writeFromReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReference) Name() (string, error) {
	fake.nameMutex.Lock()
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	return fake.nameReturns.result1, fake.nameReturns.result2
}

func (fake *FakeReference) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeReference) NameReturns(result1 string, result2 error) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeReference) Size() (uint64, error) {
	fake.sizeMutex.Lock()
	fake.sizeArgsForCall = append(fake.sizeArgsForCall, struct{}{})
	fake.recordInvocation("Size", []interface{}{})
	fake.sizeMutex.Unlock()
	if fake.SizeStub != nil {
		return fake.SizeStub()
	}
	return fake.sizeReturns.result1, fake.sizeReturns.result2
}

func (fake *FakeReference) SizeCallCount() int {
	fake.sizeMutex.RLock()
	defer fake.sizeMutex.RUnlock()
	return len(fake.sizeArgsForCall)
}

func (fake *FakeReference) SizeReturns(result1 uint64, result2 error) {
	fake.SizeStub = nil
	fake.sizeReturns = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *FakeReference) Reader() (io.ReadCloser, error) {
	fake.readerMutex.Lock()
	fake.readerArgsForCall = append(fake.readerArgsForCall, struct{}{})
	fake.recordInvocation("Reader", []interface{}{})
	fake.readerMutex.Unlock()
	if fake.ReaderStub != nil {
		return fake.ReaderStub()
	}
	return fake.readerReturns.result1, fake.readerReturns.result2
}

func (fake *FakeReference) ReaderCallCount() int {
	fake.readerMutex.RLock()
	defer fake.readerMutex.RUnlock()
	return len(fake.readerArgsForCall)
}

func (fake *FakeReference) ReaderReturns(result1 io.ReadCloser, result2 error) {
	fake.ReaderStub = nil
	fake.readerReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeReference) ReaderURI() string {
	fake.readerURIMutex.Lock()
	fake.readerURIArgsForCall = append(fake.readerURIArgsForCall, struct{}{})
	fake.recordInvocation("ReaderURI", []interface{}{})
	fake.readerURIMutex.Unlock()
	if fake.ReaderURIStub != nil {
		return fake.ReaderURIStub()
	}
	return fake.readerURIReturns.result1
}

func (fake *FakeReference) ReaderURICallCount() int {
	fake.readerURIMutex.RLock()
	defer fake.readerURIMutex.RUnlock()
	return len(fake.readerURIArgsForCall)
}

func (fake *FakeReference) ReaderURIReturns(result1 string) {
	fake.ReaderURIStub = nil
	fake.readerURIReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeReference) WriteFrom(arg1 file.Reference, arg2 *pb.ProgressBar) error {
	fake.writeFromMutex.Lock()
	fake.writeFromArgsForCall = append(fake.writeFromArgsForCall, struct {
		arg1 file.Reference
		arg2 *pb.ProgressBar
	}{arg1, arg2})
	fake.recordInvocation("WriteFrom", []interface{}{arg1, arg2})
	fake.writeFromMutex.Unlock()
	if fake.WriteFromStub != nil {
		return fake.WriteFromStub(arg1, arg2)
	}
	return fake.writeFromReturns.result1
}

func (fake *FakeReference) WriteFromCallCount() int {
	fake.writeFromMutex.RLock()
	defer fake.writeFromMutex.RUnlock()
	return len(fake.writeFromArgsForCall)
}

func (fake *FakeReference) WriteFromArgsForCall(i int) (file.Reference, *pb.ProgressBar) {
	fake.writeFromMutex.RLock()
	defer fake.writeFromMutex.RUnlock()
	return fake.writeFromArgsForCall[i].arg1, fake.writeFromArgsForCall[i].arg2
}

func (fake *FakeReference) WriteFromReturns(result1 error) {
	fake.WriteFromStub = nil
	fake.writeFromReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReference) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.sizeMutex.RLock()
	defer fake.sizeMutex.RUnlock()
	fake.readerMutex.RLock()
	defer fake.readerMutex.RUnlock()
	fake.readerURIMutex.RLock()
	defer fake.readerURIMutex.RUnlock()
	fake.writeFromMutex.RLock()
	defer fake.writeFromMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeReference) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ file.Reference = new(FakeReference)
