// This file was generated by counterfeiter
package metaurlfakes

import (
	"sync"

	"github.com/dpb587/metalink"
	"github.com/dpb587/metalink/file"
	"github.com/dpb587/metalink/file/metaurl"
)

type FakeLoader struct {
	LoadStub        func(metalink.MetaURL) (file.Reference, error)
	loadMutex       sync.RWMutex
	loadArgsForCall []struct {
		arg1 metalink.MetaURL
	}
	loadReturns struct {
		result1 file.Reference
		result2 error
	}
	MediaTypesStub        func() []string
	mediaTypesMutex       sync.RWMutex
	mediaTypesArgsForCall []struct{}
	mediaTypesReturns     struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLoader) Load(arg1 metalink.MetaURL) (file.Reference, error) {
	fake.loadMutex.Lock()
	fake.loadArgsForCall = append(fake.loadArgsForCall, struct {
		arg1 metalink.MetaURL
	}{arg1})
	fake.recordInvocation("Load", []interface{}{arg1})
	fake.loadMutex.Unlock()
	if fake.LoadStub != nil {
		return fake.LoadStub(arg1)
	}
	return fake.loadReturns.result1, fake.loadReturns.result2
}

func (fake *FakeLoader) LoadCallCount() int {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return len(fake.loadArgsForCall)
}

func (fake *FakeLoader) LoadArgsForCall(i int) metalink.MetaURL {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return fake.loadArgsForCall[i].arg1
}

func (fake *FakeLoader) LoadReturns(result1 file.Reference, result2 error) {
	fake.LoadStub = nil
	fake.loadReturns = struct {
		result1 file.Reference
		result2 error
	}{result1, result2}
}

func (fake *FakeLoader) MediaTypes() []string {
	fake.mediaTypesMutex.Lock()
	fake.mediaTypesArgsForCall = append(fake.mediaTypesArgsForCall, struct{}{})
	fake.recordInvocation("MediaTypes", []interface{}{})
	fake.mediaTypesMutex.Unlock()
	if fake.MediaTypesStub != nil {
		return fake.MediaTypesStub()
	}
	return fake.mediaTypesReturns.result1
}

func (fake *FakeLoader) MediaTypesCallCount() int {
	fake.mediaTypesMutex.RLock()
	defer fake.mediaTypesMutex.RUnlock()
	return len(fake.mediaTypesArgsForCall)
}

func (fake *FakeLoader) MediaTypesReturns(result1 []string) {
	fake.MediaTypesStub = nil
	fake.mediaTypesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLoader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	fake.mediaTypesMutex.RLock()
	defer fake.mediaTypesMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLoader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metaurl.Loader = new(FakeLoader)
