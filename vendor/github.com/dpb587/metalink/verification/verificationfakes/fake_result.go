// This file was generated by counterfeiter
package verificationfakes

import (
	"sync"

	"github.com/dpb587/metalink"
	"github.com/dpb587/metalink/verification"
)

type FakeResult struct {
	ApplyStub        func(*metalink.File) error
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 *metalink.File
	}
	applyReturns struct {
		result1 error
	}
	VerifyStub        func(metalink.File) error
	verifyMutex       sync.RWMutex
	verifyArgsForCall []struct {
		arg1 metalink.File
	}
	verifyReturns struct {
		result1 error
	}
	TypeStub        func() string
	typeMutex       sync.RWMutex
	typeArgsForCall []struct{}
	typeReturns     struct {
		result1 string
	}
	SummaryStub        func() string
	summaryMutex       sync.RWMutex
	summaryArgsForCall []struct{}
	summaryReturns     struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResult) Apply(arg1 *metalink.File) error {
	fake.applyMutex.Lock()
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 *metalink.File
	}{arg1})
	fake.recordInvocation("Apply", []interface{}{arg1})
	fake.applyMutex.Unlock()
	if fake.ApplyStub != nil {
		return fake.ApplyStub(arg1)
	}
	return fake.applyReturns.result1
}

func (fake *FakeResult) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeResult) ApplyArgsForCall(i int) *metalink.File {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.applyArgsForCall[i].arg1
}

func (fake *FakeResult) ApplyReturns(result1 error) {
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResult) Verify(arg1 metalink.File) error {
	fake.verifyMutex.Lock()
	fake.verifyArgsForCall = append(fake.verifyArgsForCall, struct {
		arg1 metalink.File
	}{arg1})
	fake.recordInvocation("Verify", []interface{}{arg1})
	fake.verifyMutex.Unlock()
	if fake.VerifyStub != nil {
		return fake.VerifyStub(arg1)
	}
	return fake.verifyReturns.result1
}

func (fake *FakeResult) VerifyCallCount() int {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	return len(fake.verifyArgsForCall)
}

func (fake *FakeResult) VerifyArgsForCall(i int) metalink.File {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	return fake.verifyArgsForCall[i].arg1
}

func (fake *FakeResult) VerifyReturns(result1 error) {
	fake.VerifyStub = nil
	fake.verifyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResult) Type() string {
	fake.typeMutex.Lock()
	fake.typeArgsForCall = append(fake.typeArgsForCall, struct{}{})
	fake.recordInvocation("Type", []interface{}{})
	fake.typeMutex.Unlock()
	if fake.TypeStub != nil {
		return fake.TypeStub()
	}
	return fake.typeReturns.result1
}

func (fake *FakeResult) TypeCallCount() int {
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	return len(fake.typeArgsForCall)
}

func (fake *FakeResult) TypeReturns(result1 string) {
	fake.TypeStub = nil
	fake.typeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeResult) Summary() string {
	fake.summaryMutex.Lock()
	fake.summaryArgsForCall = append(fake.summaryArgsForCall, struct{}{})
	fake.recordInvocation("Summary", []interface{}{})
	fake.summaryMutex.Unlock()
	if fake.SummaryStub != nil {
		return fake.SummaryStub()
	}
	return fake.summaryReturns.result1
}

func (fake *FakeResult) SummaryCallCount() int {
	fake.summaryMutex.RLock()
	defer fake.summaryMutex.RUnlock()
	return len(fake.summaryArgsForCall)
}

func (fake *FakeResult) SummaryReturns(result1 string) {
	fake.SummaryStub = nil
	fake.summaryReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeResult) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	fake.summaryMutex.RLock()
	defer fake.summaryMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeResult) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ verification.Result = new(FakeResult)
