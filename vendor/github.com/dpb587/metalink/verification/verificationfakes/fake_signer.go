// This file was generated by counterfeiter
package verificationfakes

import (
	"sync"

	"github.com/dpb587/metalink/file"
	"github.com/dpb587/metalink/verification"
)

type FakeSigner struct {
	SignStub        func(file.Reference) (verification.Result, error)
	signMutex       sync.RWMutex
	signArgsForCall []struct {
		arg1 file.Reference
	}
	signReturns struct {
		result1 verification.Result
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSigner) Sign(arg1 file.Reference) (verification.Result, error) {
	fake.signMutex.Lock()
	fake.signArgsForCall = append(fake.signArgsForCall, struct {
		arg1 file.Reference
	}{arg1})
	fake.recordInvocation("Sign", []interface{}{arg1})
	fake.signMutex.Unlock()
	if fake.SignStub != nil {
		return fake.SignStub(arg1)
	}
	return fake.signReturns.result1, fake.signReturns.result2
}

func (fake *FakeSigner) SignCallCount() int {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return len(fake.signArgsForCall)
}

func (fake *FakeSigner) SignArgsForCall(i int) file.Reference {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return fake.signArgsForCall[i].arg1
}

func (fake *FakeSigner) SignReturns(result1 verification.Result, result2 error) {
	fake.SignStub = nil
	fake.signReturns = struct {
		result1 verification.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeSigner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSigner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ verification.Signer = new(FakeSigner)
