// This file was generated by counterfeiter
package transferfakes

import (
	"sync"

	"github.com/cheggaaa/pb"
	"github.com/dpb587/metalink"
	"github.com/dpb587/metalink/file"
	"github.com/dpb587/metalink/transfer"
)

type FakeTransfer struct {
	TransferFileStub        func(metalink.File, file.Reference, *pb.ProgressBar) error
	transferFileMutex       sync.RWMutex
	transferFileArgsForCall []struct {
		arg1 metalink.File
		arg2 file.Reference
		arg3 *pb.ProgressBar
	}
	transferFileReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTransfer) TransferFile(arg1 metalink.File, arg2 file.Reference, arg3 *pb.ProgressBar) error {
	fake.transferFileMutex.Lock()
	fake.transferFileArgsForCall = append(fake.transferFileArgsForCall, struct {
		arg1 metalink.File
		arg2 file.Reference
		arg3 *pb.ProgressBar
	}{arg1, arg2, arg3})
	fake.recordInvocation("TransferFile", []interface{}{arg1, arg2, arg3})
	fake.transferFileMutex.Unlock()
	if fake.TransferFileStub != nil {
		return fake.TransferFileStub(arg1, arg2, arg3)
	}
	return fake.transferFileReturns.result1
}

func (fake *FakeTransfer) TransferFileCallCount() int {
	fake.transferFileMutex.RLock()
	defer fake.transferFileMutex.RUnlock()
	return len(fake.transferFileArgsForCall)
}

func (fake *FakeTransfer) TransferFileArgsForCall(i int) (metalink.File, file.Reference, *pb.ProgressBar) {
	fake.transferFileMutex.RLock()
	defer fake.transferFileMutex.RUnlock()
	return fake.transferFileArgsForCall[i].arg1, fake.transferFileArgsForCall[i].arg2, fake.transferFileArgsForCall[i].arg3
}

func (fake *FakeTransfer) TransferFileReturns(result1 error) {
	fake.TransferFileStub = nil
	fake.transferFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTransfer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.transferFileMutex.RLock()
	defer fake.transferFileMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTransfer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ transfer.Transfer = new(FakeTransfer)
